using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        string input = "((()))"; // Example input
        bool isValid = IsValidParentheses(input);
        Console.WriteLine($"Is the string \"{input}\" valid? {isValid}");
    }

    static bool IsValidParentheses(string s)
    {
        Stack<char> stack = new Stack<char>();

        foreach (char c in s)
        {
            if (c == '(')
            {
                stack.Push(c);
            }
            else if (c == ')')
            {
                if (stack.Count == 0)
                {
                    return false; // Unmatched closing parenthesis
                }
                stack.Pop();
            }
        }

        return stack.Count == 0; // If stack is empty, parentheses are balanced
    }
}


using System;

public class ListNode
{
    public int Val;
    public ListNode Next;
    public ListNode(int val = 0, ListNode next = null)
    {
        Val = val;
        Next = next;
    }
}

public class Solution
{
    public ListNode MergeTwoLists(ListNode l1, ListNode l2)
    {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null)
        {
            if (l1.Val <= l2.Val)
            {
                current.Next = l1;
                l1 = l1.Next;
            }
            else
            {
                current.Next = l2;
                l2 = l2.Next;
            }
            current = current.Next;
        }

        // Append remaining nodes
        if (l1 != null)
        {
            current.Next = l1;
        }
        else if (l2 != null)
        {
            current.Next = l2;
        }

        return dummy.Next;
    }

    public void PrintList(ListNode head)
    {
        ListNode current = head;
        while (current != null)
        {
            Console.Write(current.Val + " ");
            current = current.Next;
        }
        Console.WriteLine();
    }
}

class Program
{
    static void Main(string[] args)
    {
        // Create first sorted linked list: 1 -> 2 -> 4
        ListNode l1 = new ListNode(1, new ListNode(2, new ListNode(4)));

        // Create second sorted linked list: 1 -> 3 -> 4
        ListNode l2 = new ListNode(1, new ListNode(3, new ListNode(4)));

        // Merge the two lists
        Solution solution = new Solution();
        ListNode mergedList = solution.MergeTwoLists(l1, l2);

        // Print the merged list
        Console.WriteLine("Merged sorted linked list:");
        solution.PrintList(mergedList);
    }
}


using System;

class Program
{
    static void Main()
    {
        FizzBuzz();
    }

    static void FizzBuzz()
    {
        for (int i = 1; i <= 100; i++)
        {
            if (i % 3 == 0 && i % 5 == 0)
            {
                Console.WriteLine("FizzBuzz");
            }
            else if (i % 3 == 0)
            {
                Console.WriteLine("Fizz");
            }
            else if (i % 5 == 0)
            {
                Console.WriteLine("Buzz");
            }
            else
            {
                Console.WriteLine(i);
            }
        }
    }
}



using System;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        string input = "programming"; // Example input
        PrintDuplicateCharacters(input);
    }

    static void PrintDuplicateCharacters(string str)
    {
        Dictionary<char, int> charCount = new Dictionary<char, int>();

        // Count occurrences of each character
        foreach (char c in str)
        {
            if (charCount.ContainsKey(c))
            {
                charCount[c]++;
            }
            else
            {
                charCount[c] = 1;
            }
        }

        Console.WriteLine("Duplicate characters:");
        foreach (var pair in charCount)
        {
            if (pair.Value > 1)
            {
                Console.WriteLine(pair.Key);
            }
        }
    }
}



using System;

class Program
{
    static void Main(string[] args)
    {
        int number = 12345; // Example input
        int result = SumOfDigitsUntilSingleDigit(number);
        Console.WriteLine($"The single digit sum of {number} is: {result}");
    }

    static int SumOfDigitsUntilSingleDigit(int n)
    {
        while (n >= 10)
        {
            n = SumOfDigits(n);
        }
        return n;
    }

    static int SumOfDigits(int n)
    {
        int sum = 0;
        while (n > 0)
        {
            sum += n % 10; // Add the last digit to sum
            n /= 10;       // Remove the last digit
        }
        return sum;
    }
}

